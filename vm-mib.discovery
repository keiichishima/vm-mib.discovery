#!/usr/bin/env python

# Copyright 2015
# IIJ Innovation Institute Inc. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
# 
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the following
#   disclaimer in the documentation and/or other materials
#   provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY IIJ INNOVATION INSTITUTE INC. ``AS
# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
# SHALL IIJ INNOVATION INSTITUTE INC. OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

'''The vm-mib.discovery script is an external script used with Zabbix
low level discovery mechanism to discover inner index of virtual
resources defined by the VM-MIB specification.

Usage: vm-mib.discovery HOST KIND

HOST: IP address or host name of the target node
KIND: The type of index.  Currently three types are defined.
  vmCpuCoreIndex
  vmIfIndex
  vmStorageIndex

The return value is a string formatted in JSON like below.  If there
are multiple resources of a same kind, the list of JSON hash entires
will be returned.

    [
        {
            "{#VMID}": "VMID",
            "{#VMUUID}": "VMUUID",
            "{#KIND}": "KIND",
            "{#ZBXKEY}": "UNIQUE_STRING"
            "{#SUBID}": "SUBID",
            "{#EXTERNALID}": "EXTERNALID",
        }
    ]

VMID is an index number of a virthal machine
(VM-MIB::vmObjects.vmTable.vmEntry.vmIndex).  VMUUID is a UUID of the
virtual machine (VM-MIB::vmObjects.vmTable.vmEntry.vmUUID).  KIND is
the same string passed to the vm-mib.discovery command.  ZBXKEY is a
unique string that can be used as a part of the key string of Zabbix
configuration.  SUBID is a sub-index of a virtual resource, such as
virtual CPU index or virtual interface index.  EXTERNALID is an index
of external MIB entry related to the specified VM-MIB entry.
Currently, EXTERNALID is used only by the vmIfIndex type to get an
interface inxed defined in the Interface MIB.

'''

import json
import re
import subprocess
import sys

VM_MIB_OID = '.1.3.6.1.2.1.23456'

VM_MIB_INDEX_RE = re.compile(VM_MIB_OID + '.1.4.1.2.(\d+)')
VM_MIB_CPU_CORE_INDEX_RE = re.compile(VM_MIB_OID + '.1.5.1.2.(\d+).(\d+)')
VM_MIB_IF_INDEX_RE = re.compile(VM_MIB_OID + '.1.8.1.2.(\d+).(\d+)')
VM_MIB_STORAGE_INDEX_RE = re.compile(VM_MIB_OID + '.1.7.1.13.(\d+).(\d+)')


KINDS = [
    'vmCpuCoreIndex',
    'vmIfIndex',
    'vmStorageIndex',
]

vm_ids = {}

def createData(vm_id, kind, sub_id='0', ext_id='0'):
    return ({
        '{#VMID}': vm_id,
        '{#VMUUID}': vm_ids[vm_id],
        '{#KIND}': kind,
        '{#ZBXKEY}': kind + '.' + sub_id + '.' + vm_ids[vm_id],
        '{#SUBID}': sub_id,
        '{#EXTERNALID}': ext_id,
        })

if __name__ == '__main__':
    host = sys.argv[1]
    kind = sys.argv[2]

    if host is None:
        host = 'localhost'
    if kind not in KINDS:
        sys.exit(0)

    output = subprocess.Popen(['/usr/bin/snmpwalk',
                               '-v2c', '-cpublic', '-On',
                               host, VM_MIB_OID],
                              stdout=subprocess.PIPE).communicate()[0]

    data = []
    for line in output.splitlines():
        sep = line.find('=')
        oid = line[:sep - 1]
        value = line[sep + 2:]

        # collect vm index
        ids =  VM_MIB_INDEX_RE.match(oid)
        if ids:
            vm_id = ids.group(1)
            vm_uuid = value[9:-1]
            vm_ids[vm_id] = vm_uuid

        if kind == 'vmCpuCoreIndex':
            ids = VM_MIB_CPU_CORE_INDEX_RE.match(oid)
            if ids:
                vm_id = ids.group(1)
                vm_core_id = ids.group(2)
                d = createData(vm_id, kind, vm_core_id)
                data.append(d)

        if kind == 'vmIfIndex':
            ids = VM_MIB_IF_INDEX_RE.match(oid)
            if ids:
                vm_id = ids.group(1)
                vm_if_id = ids.group(2)
                if_id = value[9:]
                if if_id != '0':
                    d = createData(vm_id, 'vmIfIndex', vm_if_id, if_id)
                    data.append(d)

        if kind == 'vmStorageIndex':
            ids = VM_MIB_STORAGE_INDEX_RE.match(oid)
            if ids:
                vm_id = ids.group(1)
                vm_storage_id = ids.group(2)
                d = createData(vm_id, 'vmStorageIndex', vm_storage_id)
                data.append(d)


    response = {
        'data': data
    }
    print json.dumps(response, indent=4)
